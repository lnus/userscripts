---
// no props, all client side!
---

<div class="mb-8">
  <input
    id="script-search"
    type="text"
    placeholder="search scripts..."
    class="w-full px-4 py-2
    border-b
    bg-white dark:bg-black
    outline-none
    focus:outline focus:outline-stone-200 focus:border-b-transparent
    transition-all"
  />
  <div id="active-tags" class="flex gap-2 flex-wrap"></div>
</div>

<script>
  const searchInput: HTMLInputElement =
    document.querySelector("#script-search") || new HTMLInputElement();
  const scripts = document.querySelectorAll("article");
  const activeTags = new Set();

  // update Tag.astro to be clickable!
  document.querySelectorAll("[data-tag]").forEach((tag) => {
    tag.classList.add("cursor-pointer");
    tag.addEventListener("click", () => {
      const tagName = tag.textContent?.slice(1); // remove #
      if (!tagName) return;

      if (activeTags.has(tagName)) {
        activeTags.delete(tagName);
        tag.classList.remove("bg-neutral-200", "dark:bg-neutral-700");
      } else {
        activeTags.add(tagName);
        tag.classList.add("bg-neutral-200", "dark:bg-neutral-700");
      }

      filterScripts();
    });
  });

  function filterScripts() {
    const query = searchInput?.value.toLowerCase() || "";

    scripts.forEach((script) => {
      const text = script.textContent?.toLowerCase() || "";
      const tags = Array.from(script.querySelectorAll("[data-tag]")).map(
        (tag) => tag.textContent?.slice(1).toLowerCase(),
      );

      const matchesSearch = text.includes(query);
      const matchesTags =
        activeTags.size === 0 || tags.some((t) => t && activeTags.has(t));

      script.style.display = matchesSearch && matchesTags ? "block" : "none";
    });
  }

  searchInput?.addEventListener("input", filterScripts);
</script>
